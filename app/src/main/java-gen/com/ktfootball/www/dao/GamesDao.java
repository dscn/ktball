package com.ktfootball.www.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ktfootball.www.dao.Games;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAMES.
*/
public class GamesDao extends AbstractDao<Games, Long> {

    public static final String TABLENAME = "GAMES";

    /**
     * Properties of entity Games.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Game_id = new Property(1, String.class, "game_id", false, "GAME_ID");
        public final static Property Game_enter_users_count = new Property(2, String.class, "game_enter_users_count", false, "GAME_ENTER_USERS_COUNT");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Time_start = new Property(4, String.class, "time_start", false, "TIME_START");
        public final static Property Time_end = new Property(5, String.class, "time_end", false, "TIME_END");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property Introduction = new Property(7, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Location = new Property(8, String.class, "location", false, "LOCATION");
        public final static Property Ktb = new Property(9, String.class, "ktb", false, "KTB");
        public final static Property Enter_time_start = new Property(10, String.class, "enter_time_start", false, "ENTER_TIME_START");
        public final static Property Enter_time_end = new Property(11, String.class, "enter_time_end", false, "ENTER_TIME_END");
        public final static Property Place = new Property(12, String.class, "place", false, "PLACE");
        public final static Property Country = new Property(13, String.class, "country", false, "COUNTRY");
        public final static Property City = new Property(14, String.class, "city", false, "CITY");
    };


    public GamesDao(DaoConfig config) {
        super(config);
    }
    
    public GamesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAMES' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'GAME_ID' TEXT," + // 1: game_id
                "'GAME_ENTER_USERS_COUNT' TEXT," + // 2: game_enter_users_count
                "'NAME' TEXT," + // 3: name
                "'TIME_START' TEXT," + // 4: time_start
                "'TIME_END' TEXT," + // 5: time_end
                "'AVATAR' TEXT," + // 6: avatar
                "'INTRODUCTION' TEXT," + // 7: introduction
                "'LOCATION' TEXT," + // 8: location
                "'KTB' TEXT," + // 9: ktb
                "'ENTER_TIME_START' TEXT," + // 10: enter_time_start
                "'ENTER_TIME_END' TEXT," + // 11: enter_time_end
                "'PLACE' TEXT," + // 12: place
                "'COUNTRY' TEXT," + // 13: country
                "'CITY' TEXT);"); // 14: city
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAMES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Games entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String game_id = entity.getGame_id();
        if (game_id != null) {
            stmt.bindString(2, game_id);
        }
 
        String game_enter_users_count = entity.getGame_enter_users_count();
        if (game_enter_users_count != null) {
            stmt.bindString(3, game_enter_users_count);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String time_start = entity.getTime_start();
        if (time_start != null) {
            stmt.bindString(5, time_start);
        }
 
        String time_end = entity.getTime_end();
        if (time_end != null) {
            stmt.bindString(6, time_end);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(9, location);
        }
 
        String ktb = entity.getKtb();
        if (ktb != null) {
            stmt.bindString(10, ktb);
        }
 
        String enter_time_start = entity.getEnter_time_start();
        if (enter_time_start != null) {
            stmt.bindString(11, enter_time_start);
        }
 
        String enter_time_end = entity.getEnter_time_end();
        if (enter_time_end != null) {
            stmt.bindString(12, enter_time_end);
        }
 
        String place = entity.getPlace();
        if (place != null) {
            stmt.bindString(13, place);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(14, country);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(15, city);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Games readEntity(Cursor cursor, int offset) {
        Games entity = new Games( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // game_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // game_enter_users_count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time_start
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time_end
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // introduction
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // location
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ktb
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // enter_time_start
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // enter_time_end
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // place
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // country
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // city
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Games entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGame_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGame_enter_users_count(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime_start(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime_end(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntroduction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLocation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKtb(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEnter_time_start(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEnter_time_end(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPlace(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCountry(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCity(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Games entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Games entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
