package com.ktfootball.www.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ktfootball.www.dao.Users;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USERS.
*/
public class UsersDao extends AbstractDao<Users, Long> {

    public static final String TABLENAME = "USERS";

    /**
     * Properties of entity Users.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "AVATAR");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Grade = new Property(6, String.class, "grade", false, "GRADE");
        public final static Property Scores = new Property(7, String.class, "scores", false, "SCORES");
        public final static Property Power = new Property(8, String.class, "power", false, "POWER");
        public final static Property Ktb = new Property(9, String.class, "ktb", false, "KTB");
        public final static Property Age = new Property(10, String.class, "age", false, "AGE");
        public final static Property Gender = new Property(11, String.class, "gender", false, "GENDER");
    };


    public UsersDao(DaoConfig config) {
        super(config);
    }
    
    public UsersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USERS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' TEXT," + // 1: user_id
                "'AVATAR' TEXT," + // 2: avatar
                "'NICKNAME' TEXT," + // 3: nickname
                "'EMAIL' TEXT," + // 4: email
                "'PHONE' TEXT," + // 5: phone
                "'GRADE' TEXT," + // 6: grade
                "'SCORES' TEXT," + // 7: scores
                "'POWER' TEXT," + // 8: power
                "'KTB' TEXT," + // 9: ktb
                "'AGE' TEXT," + // 10: age
                "'GENDER' TEXT);"); // 11: gender
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Users entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(7, grade);
        }
 
        String scores = entity.getScores();
        if (scores != null) {
            stmt.bindString(8, scores);
        }
 
        String power = entity.getPower();
        if (power != null) {
            stmt.bindString(9, power);
        }
 
        String ktb = entity.getKtb();
        if (ktb != null) {
            stmt.bindString(10, ktb);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(11, age);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(12, gender);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Users readEntity(Cursor cursor, int offset) {
        Users entity = new Users( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // grade
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // scores
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // power
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ktb
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // age
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // gender
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Users entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGrade(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setScores(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPower(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKtb(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAge(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGender(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Users entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Users entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
