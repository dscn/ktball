package com.ktfootball.www.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ktfootball.www.dao.UploadBigClassroomCourseRecordBoolean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table UPLOAD_BIG_CLASSROOM_COURSE_RECORD_BOOLEAN.
*/
public class UploadBigClassroomCourseRecordBooleanDao extends AbstractDao<UploadBigClassroomCourseRecordBoolean, Long> {

    public static final String TABLENAME = "UPLOAD_BIG_CLASSROOM_COURSE_RECORD_BOOLEAN";

    /**
     * Properties of entity UploadBigClassroomCourseRecordBoolean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Club_id = new Property(1, String.class, "club_id", false, "CLUB_ID");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Youku_video_url = new Property(3, String.class, "youku_video_url", false, "YOUKU_VIDEO_URL");
        public final static Property Classroom_id = new Property(4, String.class, "classroom_id", false, "CLASSROOM_ID");
        public final static Property Classes = new Property(5, String.class, "classes", false, "CLASSES");
        public final static Property Is_finished = new Property(6, String.class, "is_finished", false, "IS_FINISHED");
        public final static Property Path = new Property(7, String.class, "path", false, "PATH");
        public final static Property Finished_time = new Property(8, String.class, "finished_time", false, "FINISHED_TIME");
        public final static Property IsSuccess = new Property(9, Boolean.class, "isSuccess", false, "IS_SUCCESS");
    };


    public UploadBigClassroomCourseRecordBooleanDao(DaoConfig config) {
        super(config);
    }
    
    public UploadBigClassroomCourseRecordBooleanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'UPLOAD_BIG_CLASSROOM_COURSE_RECORD_BOOLEAN' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CLUB_ID' TEXT," + // 1: club_id
                "'USER_ID' TEXT," + // 2: user_id
                "'YOUKU_VIDEO_URL' TEXT," + // 3: youku_video_url
                "'CLASSROOM_ID' TEXT," + // 4: classroom_id
                "'CLASSES' TEXT," + // 5: classes
                "'IS_FINISHED' TEXT," + // 6: is_finished
                "'PATH' TEXT," + // 7: path
                "'FINISHED_TIME' TEXT," + // 8: finished_time
                "'IS_SUCCESS' INTEGER);"); // 9: isSuccess
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UPLOAD_BIG_CLASSROOM_COURSE_RECORD_BOOLEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UploadBigClassroomCourseRecordBoolean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String club_id = entity.getClub_id();
        if (club_id != null) {
            stmt.bindString(2, club_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String youku_video_url = entity.getYouku_video_url();
        if (youku_video_url != null) {
            stmt.bindString(4, youku_video_url);
        }
 
        String classroom_id = entity.getClassroom_id();
        if (classroom_id != null) {
            stmt.bindString(5, classroom_id);
        }
 
        String classes = entity.getClasses();
        if (classes != null) {
            stmt.bindString(6, classes);
        }
 
        String is_finished = entity.getIs_finished();
        if (is_finished != null) {
            stmt.bindString(7, is_finished);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
 
        String finished_time = entity.getFinished_time();
        if (finished_time != null) {
            stmt.bindString(9, finished_time);
        }
 
        Boolean isSuccess = entity.getIsSuccess();
        if (isSuccess != null) {
            stmt.bindLong(10, isSuccess ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UploadBigClassroomCourseRecordBoolean readEntity(Cursor cursor, int offset) {
        UploadBigClassroomCourseRecordBoolean entity = new UploadBigClassroomCourseRecordBoolean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // club_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // youku_video_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // classroom_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // classes
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // is_finished
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // path
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // finished_time
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // isSuccess
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UploadBigClassroomCourseRecordBoolean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClub_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYouku_video_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClassroom_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClasses(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIs_finished(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFinished_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsSuccess(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UploadBigClassroomCourseRecordBoolean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UploadBigClassroomCourseRecordBoolean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
