package com.ktfootball.www.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ktfootball.www.dao.RankingPower;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RANKING_POWER.
*/
public class RankingPowerDao extends AbstractDao<RankingPower, Long> {

    public static final String TABLENAME = "RANKING_POWER";

    /**
     * Properties of entity RankingPower.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property Age = new Property(3, String.class, "age", false, "AGE");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property School_grade = new Property(5, String.class, "school_grade", false, "SCHOOL_GRADE");
        public final static Property School_cls = new Property(6, String.class, "school_cls", false, "SCHOOL_CLS");
        public final static Property Scores = new Property(7, String.class, "scores", false, "SCORES");
        public final static Property Power = new Property(8, String.class, "power", false, "POWER");
        public final static Property Win_rate = new Property(9, String.class, "win_rate", false, "WIN_RATE");
    };


    public RankingPowerDao(DaoConfig config) {
        super(config);
    }
    
    public RankingPowerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RANKING_POWER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' TEXT," + // 1: user_id
                "'NICKNAME' TEXT," + // 2: nickname
                "'AGE' TEXT," + // 3: age
                "'GENDER' TEXT," + // 4: gender
                "'SCHOOL_GRADE' TEXT," + // 5: school_grade
                "'SCHOOL_CLS' TEXT," + // 6: school_cls
                "'SCORES' TEXT," + // 7: scores
                "'POWER' TEXT," + // 8: power
                "'WIN_RATE' TEXT);"); // 9: win_rate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RANKING_POWER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RankingPower entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(4, age);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String school_grade = entity.getSchool_grade();
        if (school_grade != null) {
            stmt.bindString(6, school_grade);
        }
 
        String school_cls = entity.getSchool_cls();
        if (school_cls != null) {
            stmt.bindString(7, school_cls);
        }
 
        String scores = entity.getScores();
        if (scores != null) {
            stmt.bindString(8, scores);
        }
 
        String power = entity.getPower();
        if (power != null) {
            stmt.bindString(9, power);
        }
 
        String win_rate = entity.getWin_rate();
        if (win_rate != null) {
            stmt.bindString(10, win_rate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RankingPower readEntity(Cursor cursor, int offset) {
        RankingPower entity = new RankingPower( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // age
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // school_grade
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // school_cls
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // scores
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // power
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // win_rate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RankingPower entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSchool_grade(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSchool_cls(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setScores(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPower(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWin_rate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RankingPower entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RankingPower entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
