package com.ktfootball.www.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ktfootball.www.dao.RankingLeagueScores3v3;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RANKING_LEAGUE_SCORES3V3.
*/
public class RankingLeagueScores3v3Dao extends AbstractDao<RankingLeagueScores3v3, Long> {

    public static final String TABLENAME = "RANKING_LEAGUE_SCORES3V3";

    /**
     * Properties of entity RankingLeagueScores3v3.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property League_id = new Property(1, String.class, "league_id", false, "LEAGUE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Scores = new Property(3, String.class, "scores", false, "SCORES");
        public final static Property Win_rate = new Property(4, String.class, "win_rate", false, "WIN_RATE");
    };


    public RankingLeagueScores3v3Dao(DaoConfig config) {
        super(config);
    }
    
    public RankingLeagueScores3v3Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RANKING_LEAGUE_SCORES3V3' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'LEAGUE_ID' TEXT," + // 1: league_id
                "'NAME' TEXT," + // 2: name
                "'SCORES' TEXT," + // 3: scores
                "'WIN_RATE' TEXT);"); // 4: win_rate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RANKING_LEAGUE_SCORES3V3'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RankingLeagueScores3v3 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String league_id = entity.getLeague_id();
        if (league_id != null) {
            stmt.bindString(2, league_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String scores = entity.getScores();
        if (scores != null) {
            stmt.bindString(4, scores);
        }
 
        String win_rate = entity.getWin_rate();
        if (win_rate != null) {
            stmt.bindString(5, win_rate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RankingLeagueScores3v3 readEntity(Cursor cursor, int offset) {
        RankingLeagueScores3v3 entity = new RankingLeagueScores3v3( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // league_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // scores
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // win_rate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RankingLeagueScores3v3 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLeague_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScores(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWin_rate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RankingLeagueScores3v3 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RankingLeagueScores3v3 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
