package com.ktfootball.www.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.ktfootball.www.dao.BagsDao;
import com.ktfootball.www.dao.UsersDao;
import com.ktfootball.www.dao.GamesDao;
import com.ktfootball.www.dao.SideAandBDao;
import com.ktfootball.www.dao.VcrPathDao;
import com.ktfootball.www.dao.UploadBigClassroomCourseRecordDao;
import com.ktfootball.www.dao.UploadBigClassroomCourseRecordBooleanDao;
import com.ktfootball.www.dao.RankingPowerDao;
import com.ktfootball.www.dao.RankingLeagueScoresDao;
import com.ktfootball.www.dao.RankingLeagueScores3v3Dao;
import com.ktfootball.www.dao.RankingLeagueScores1v1Dao;
import com.ktfootball.www.dao.UploadGymCourseRecordDao;
import com.ktfootball.www.dao.UserInfoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 13): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 13;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        BagsDao.createTable(db, ifNotExists);
        UsersDao.createTable(db, ifNotExists);
        GamesDao.createTable(db, ifNotExists);
        SideAandBDao.createTable(db, ifNotExists);
        VcrPathDao.createTable(db, ifNotExists);
        UploadBigClassroomCourseRecordDao.createTable(db, ifNotExists);
        UploadBigClassroomCourseRecordBooleanDao.createTable(db, ifNotExists);
        RankingPowerDao.createTable(db, ifNotExists);
        RankingLeagueScoresDao.createTable(db, ifNotExists);
        RankingLeagueScores3v3Dao.createTable(db, ifNotExists);
        RankingLeagueScores1v1Dao.createTable(db, ifNotExists);
        UploadGymCourseRecordDao.createTable(db, ifNotExists);
        UserInfoDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        BagsDao.dropTable(db, ifExists);
        UsersDao.dropTable(db, ifExists);
        GamesDao.dropTable(db, ifExists);
        SideAandBDao.dropTable(db, ifExists);
        VcrPathDao.dropTable(db, ifExists);
        UploadBigClassroomCourseRecordDao.dropTable(db, ifExists);
        UploadBigClassroomCourseRecordBooleanDao.dropTable(db, ifExists);
        RankingPowerDao.dropTable(db, ifExists);
        RankingLeagueScoresDao.dropTable(db, ifExists);
        RankingLeagueScores3v3Dao.dropTable(db, ifExists);
        RankingLeagueScores1v1Dao.dropTable(db, ifExists);
        UploadGymCourseRecordDao.dropTable(db, ifExists);
        UserInfoDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(BagsDao.class);
        registerDaoClass(UsersDao.class);
        registerDaoClass(GamesDao.class);
        registerDaoClass(SideAandBDao.class);
        registerDaoClass(VcrPathDao.class);
        registerDaoClass(UploadBigClassroomCourseRecordDao.class);
        registerDaoClass(UploadBigClassroomCourseRecordBooleanDao.class);
        registerDaoClass(RankingPowerDao.class);
        registerDaoClass(RankingLeagueScoresDao.class);
        registerDaoClass(RankingLeagueScores3v3Dao.class);
        registerDaoClass(RankingLeagueScores1v1Dao.class);
        registerDaoClass(UploadGymCourseRecordDao.class);
        registerDaoClass(UserInfoDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
